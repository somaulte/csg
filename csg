#!/usr/bin/env bash
#
# csg: generate base16 colorscheme using a single colormask in hex.
# https://github.com/somaulte/csg
#
# MIT License
#
# Copyright (c) 2018 somaulte <somaulte@teknik.io>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# Except as contained in this notice, the name(s) of the above copyright
# holders shall not be used in advertising or otherwise to promote the sale, use
# or other dealings in this Software without prior written authorization.

# If the $CSG_DEBUG environment variable is set to 'true' or '1', enter debug mode
[[ "$CSG_DEBUG" =~ ('true'|'1') ]] && set -x

# Disable unicode for performance
LC_ALL=C
LANG=C

# List colors 0-15 of base16 colorscheme to compare against
color0='#1D1F23'
color1='#A54B4B'
color2='#6DA741'
color3='#836539'
color4='#216590'
color5='#5C3466'
color6='#1AAD95'
color7='#B6B6B6'
color8='#2D3135'
color9='#D76F68'
color10='#96CB5C'
color11='#C59B3D'
color12='#21A4DF'
color13='#AD7FA8'
color14='#68CBC0'
color15='#D3D7CF'

# Usage: deconstruct [index] [color]
# Separates color channels from hexadecimal format colors and converts them to
# base10 integers
deconstruct() {
	# Determine which index we are working on
	c="color${1}"

	# Deconstruct current base16 color: ${c{rgb}[$1]}
	cr="${!c:1:2}"
	cr="$((16#${cr}))"
	cg="${!c:3:2}"
	cg="$((16#${cg}))"
	cb="${!c:5:2}"
	cb="$((16#${cb}))"
	cr["$1"]="${cr}"
	cg["$1"]="${cg}"
	cb["$1"]="${cb}"

	ir1="${2:1:2}"
	ir1="$((16#${ir1}))"
	ig1="${2:3:2}"
	ig1="$((16#${ig1}))"
	ib1="${2:5:2}"
	ib1="$((16#${ib1}))"
}

# Formula:
# a = ${i{rgb}1}; b = ${c{rgb}[$1]}; c = ( ${2} / 100 )
# ( ac + b!c )
#
# Usage: merge [index] [weight]
# Generates color channel values between the current base16 and input colors
merge() {
	ir2="$(( ( ( ${2} * ${ir1} ) + ( ( 100 - ${2} ) * ${cr[$1]} ) ) / 100 ))"
	ig2="$(( ( ( ${2} * ${ig1} ) + ( ( 100 - ${2} ) * ${cg[$1]} ) ) / 100 ))"
	ib2="$(( ( ( ${2} * ${ib1} ) + ( ( 100 - ${2} ) * ${cb[$1]} ) ) / 100 ))"
}

# Usage: reconstruct [index]
# Converts new color channel values back into a full hexadecimal format color
reconstruct() {
	printf -v oc '%s%02x%02x%02x' "#" "${ir2}" "${ig2}" "${ib2}"
}

# Print usage info
usage() {
	IFS=$'\n'
	read -rd '' "usage_doc" <<-'EOF'
		Usage: csg {OPTION} color weight
		   Options:
		   	-f				Set color0 to the input color.
		   	-h, --help			Display this message.
		   Arguments:
		   	color				A single color represented in hexadecimal format: #FFFFFF
		   	weight				Value between 0 and 100, a higher number results in
	   						a color more closely resembling the input color.
	EOF
	printf '%b\n' "$usage_doc"
}

main() {
	# Check for any specified options or arguments
	[[ "$1" =~ ("-h"|"--help") ]] && {
		usage
		exit 0
	} || [[ "$1" == "-f" ]] && {
		COLOR0_SAME_AS_BG="1"
		shift 1
		main "$@"
	} || [[ -n "$1" ]] && [[ -n "$2" ]] && {
		# Verify arguments are valid
		[[ "$1" =~ ^'#'[A-Fa-f0-9]{1,6}$ ]] && [[ "$2" =~ ^[0-9]$|^[0-9][0-9]$|^[0-1][0]{1,2}$ ]] && {
			for i in {0..15}; do
				deconstruct "$i" "$1"
				merge "$i" "$2"
				reconstruct "$i"
				[[ "$i" == "0" ]] && [[ "$COLOR0_SAME_AS_BG" == "1" ]] && printf '%b\n' "color${i}: $1" || printf '%b\n' "color${i}: $oc"
			done
			exit 0
		}
	} || {
		usage
		exit 1
	}
}

main "$@"